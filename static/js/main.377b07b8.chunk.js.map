{"version":3,"sources":["services/pokedex.service.tsx","store/store.tsx","imgs/PokeBall.png","cmps/PokemonPreview.tsx","cmps/PokemonList.tsx","cmps/HomePage.tsx","cmps/PokemonDetails.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PokedexService","getPokemonsList","getPokemon","filter","amount","a","axios","get","data","results","url","pokemon","name","height","weight","id","img","sprites","front_shiny","str","_getAllPokemons","allPokemons","regex","RegExp","pokemons","p","test","_loadFromStorage","count","_saveToStorage","key","json","JSON","stringify","localStorage","setItem","getItem","parse","pokemonSlice","createSlice","initialState","currPokemon","pokemonsToShow","reducers","setPokemon","state","action","payload","setPokemonsToShow","actions","store","configureStore","reducer","Card","styled","section","PokemonPreview","dispatch","useDispatch","onClick","saveCurrPokemon","to","src","pokeBall","alt","CardContainer","PokemonList","useSelector","map","idx","Input","input","Container","article","HomePage","useState","page","setPage","useEffect","amountPokemons","pokemonsList","length","changePage","filterByName","ev","value","target","pokemonsFiltered","onChange","placeholder","type","ImgContainet","ButtonContainer","UserMsg","PokemonDetails","history","useHistory","isUserMsg","setisUserMsg","details","setDetails","push","pokemonData","moveTo","setTimeout","GlobalStyle","createGlobalStyle","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.377b07b8.chunk.js","sourcesContent":["import axios from 'axios'\nimport { Pokemon, PokemonData } from '../types/interfaces'\n\n\nexport const PokedexService = {\n    getPokemonsList,\n    getPokemon,\n    filter\n}\n\nasync function getPokemonsList(amount: number): Promise<Pokemon[]> {\n    const { data } = await axios.get(`https://pokeapi.co/api/v2/pokemon?offset=${amount}&limit=50`)\n    return data.results\n}\n\nasync function getPokemon(url: string): Promise<PokemonData> {\n    const { data } = await axios.get(url)\n\n    const pokemon: PokemonData = {\n        name: data.name,\n        height: data.height,\n        weight: data.weight,\n        id: data.id,\n        img: data.sprites.front_shiny\n    }\n\n    return pokemon\n}\n\nasync function filter(str: string): Promise<Pokemon[]> {\n    const allPokemons = await _getAllPokemons()\n\n    const regex = new RegExp(str, 'i')\n    const pokemons = allPokemons.filter((p: Pokemon) => regex.test(p.name))\n    return pokemons\n}\n\nasync function _getAllPokemons(): Promise<Pokemon[]> {\n    if (_loadFromStorage('allPokemons')) return _loadFromStorage('allPokemons')\n\n    const { data } = await axios.get(`https://pokeapi.co/api/v2/pokemon`)\n    const { count } = data\n    const allPokemons = await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=${count}`)\n\n    _saveToStorage('allPokemons', allPokemons.data.results)\n    return allPokemons.data.results\n}\n\nfunction _saveToStorage(key: string, data: any) {\n    var json = JSON.stringify(data);\n    localStorage.setItem(key, json)\n}\n\nfunction _loadFromStorage(key: string) {\n    var json: any = localStorage.getItem(key)\n    var data = JSON.parse(json)\n    return data;\n}","import { configureStore, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Istate, Pokemon } from \"../types/interfaces\";\n\n\nconst initialState: Istate = {\n    currPokemon: null,\n    pokemonsToShow: []\n}\n\nexport const pokemonSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        setPokemon: (state, action: PayloadAction<Pokemon>) => {\n            state.currPokemon = action.payload\n        },\n\n        setPokemonsToShow: (state, action: PayloadAction<Pokemon[]>) => {\n            state.pokemonsToShow = action.payload\n        }\n    }\n})\n\nexport const { setPokemon, setPokemonsToShow } = pokemonSlice.actions\n\nconst store = configureStore({\n    reducer: {\n        pokemon: pokemonSlice.reducer\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport const selectPokemon = (state: RootState) => state.pokemon\n\nexport default store ","export default __webpack_public_path__ + \"static/media/PokeBall.a3a90d82.png\";","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport pokeBall from '../imgs/PokeBall.png'\nimport { setPokemon } from '../store/store'\nimport { IpropsPokemon, Pokemon } from '../types/interfaces'\n\nconst Card = styled.section`\nbackground-color: #b6b3b355;\nborder: 1px solid white;\nwidth: 200px;\nheight: 200px;\ncursor: pointer;\ntext-align: center;\nborder-radius: 5px;\n\na{\n    all: unset;\n\n    &:hover{\n    font-size: 20px;\n    }\n\n    p{\n        background-color: unset;\n        margin-top: 5px;\n        text-transform: uppercase;\n        letter-spacing: 1px;\n    }\n\n    img{\n        width: 100%;\n        max-height: 75%;\n    }\n}\n\n@media (max-width: 768px) {\n    width: 90%;\n    height: 25%;\n    margin: 0 auto 15px auto;\n\n    p{\n        margin: 10px 0;\n    }\n  }\n`\n\n\nexport const PokemonPreview: React.FC<IpropsPokemon> = ({ pokemon }) => {\n    const dispatch = useDispatch()\n\n    const saveCurrPokemon = (pokemon: Pokemon) => {\n        dispatch(setPokemon(pokemon))\n    }\n\n    return (\n        <Card>\n            <Link onClick={() => saveCurrPokemon(pokemon)} to='/details'>\n                <img src={pokeBall} alt=\"#\" />\n                <p>{pokemon.name}</p>\n            </Link>\n        </Card>\n    )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport { RootState } from '../store/store'\nimport { Pokemon } from '../types/interfaces'\nimport { PokemonPreview } from './PokemonPreview'\n\n\nconst CardContainer = styled.section`\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: center;\ngap: 10px;\nmargin-top: 2%;\n\n@media (max-width: 768px) {\n    display: block;\n    width: 100%;\n}`\n\n\nexport const PokemonList: React.FC = () => {\n\n    const pokemons: Pokemon[] = useSelector((state: RootState) => state.pokemon.pokemonsToShow)\n\n    return (\n        <CardContainer>\n            {\n                pokemons && pokemons.map((pokemon: Pokemon, idx: number) => (\n                    <article key={idx}>\n                        <PokemonPreview pokemon={pokemon} />\n                    </article>\n                ))\n            }\n        </CardContainer>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport { PokedexService } from '../services/pokedex.service'\nimport { setPokemonsToShow } from '../store/store'\nimport { Pokemon } from '../types/interfaces'\nimport { PokemonList } from './PokemonList'\n\n\nconst Input = styled.input`\n    width: 50%;\n    padding: 12px 20px;\n    margin: 8px 0;\n    display: inline-block;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n\n    display: flex;\n    margin: 2% auto;\n`\n\n\n\nconst Container = styled.article`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    button{\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color .3s;\n    border: 1px solid #ddd;\n    cursor: pointer;\n    margin: 0 10px;\n    text-transform: uppercase;\n\n    &:hover{\n        background-color: #949393bc;\n     }\n     \n    }\n`\n\n\nexport const HomePage: React.FC = () => {\n\n    const [page, setPage] = useState<number>(1)\n    const dispatch = useDispatch()\n\n    useEffect((): void => {\n\n        (async () => {\n            const amountPokemons: number = 50 * page\n            const pokemonsList = await PokedexService.getPokemonsList(amountPokemons)\n\n            if (!pokemonsList.length) return setPage(1)\n            dispatch(setPokemonsToShow(pokemonsList))\n        })();\n\n    }, [page])\n\n    const changePage = (str: string): void => {\n        if (str === 'next') setPage(page + 1)\n        else if (page > 1) setPage(page - 1)\n    }\n\n    const filterByName = async (ev: any): Promise<void> => {\n        const value: string = ev.target.value\n        const pokemonsFiltered: Pokemon[] = await PokedexService.filter(value)\n        dispatch(setPokemonsToShow(pokemonsFiltered))\n    }\n\n    return (\n        <>\n            <Input onChange={filterByName} placeholder='Search' type=\"text\" />\n\n            <Container>\n                <button onClick={() => changePage('prev')}>&laquo; Prev page </button>\n                <h3>{page}</h3>\n                <button onClick={() => changePage('next')}>Next page &raquo;</button>\n            </Container>\n\n            <PokemonList />\n        </>\n    )\n}\n\n","import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useHistory } from 'react-router'\nimport styled from 'styled-components'\nimport { PokedexService } from '../services/pokedex.service'\nimport { RootState } from '../store/store'\nimport { Pokemon, PokemonData } from '../types/interfaces'\n\n\nconst Container = styled.section`\n    width: 500px;\n    text-align: center;\n    background-color: red;\n    border: 1px solid white;\n    border-radius: 20px;\n    border: 1px solid black;\n\n    position: absolute;\n    top: 50%; right: 50%;\n    transform: translate(50%,-50%);\n\n    aside{\n        display: flex;\n        max-width: 70%;\n        margin: 20px auto;\n        border-radius: 15px;\n        gap: 10px;\n        background-color: unset;\n        span{\n            background-color: white;\n            border-radius: 15px;\n            flex: 1;\n            color: black;\n            padding: 10px;\n            border: 2px solid black;\n        }\n\n        button{\n            all: unset;\n            border: 2px solid black;\n            background-color: white;\n            color: black;\n            padding: 5px;\n            border-radius: 15px;\n            cursor: pointer;\n\n            transition: 0.3s;\n            &:hover{\n                transition: 0.3s;\n                color: red;\n            }\n        }\n    }\n\n        h1{\n            background-color: unset;\n            margin-bottom: 25px;\n        }\n\n`\n\nconst ImgContainet = styled.article`\n    /* margin-top: 35px; */\n    width: 70%;\n    height: 250px;\n    border: 1px solid white;\n    margin: 25px auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 15px;\n    background-color: white;\n    border: 2px solid black;\n    img{\n        width: 70%;\n        background-color: unset;\n    }\n \n`\n\nconst ButtonContainer = styled.article`\n    background-color: unset;\n    margin: 25px 0;\n    display: flex;\n    justify-content: space-around;\n    button{\n        all: unset;\n        border: 2px solid black;\n        cursor: pointer;\n        padding: 15px 35px;\n        border-radius: 15px;\n        background-color: white;\n        color: black;\n\n        transition: 0.3s;\n        &:hover{\n            transition: 0.3s;\n            color: red;\n        }\n    }\n`\n\nconst UserMsg = styled.article`\n    padding: 20px;\n    max-width: 80%;\n    margin: 10px auto 0 auto;\n    background-color: #f44336d1;\n    color: white;\n    text-align: center;\n`\n\n\nexport const PokemonDetails: React.FC = () => {\n\n    const history = useHistory<unknown>()\n    const [isUserMsg, setisUserMsg] = useState(false)\n    const [details, setDetails] = useState<null | PokemonData>(null)\n\n    const currPokemon: Pokemon | null = useSelector((state: RootState) => state.pokemon.currPokemon)\n\n    useEffect((): void => {\n\n        (async () => {\n            if (!currPokemon) return history.push('/')\n            const pokemonData: PokemonData = await PokedexService.getPokemon(currPokemon.url)\n            setDetails(pokemonData)\n        })();\n\n    }, [])\n\n\n\n\n    const moveTo = (str: string) => {\n        setisUserMsg(true)\n        setTimeout(() => setisUserMsg(false), 3000);\n    }\n\n    if (!details) return <div>Loading...</div>\n    return (\n        <>\n            <Container>\n                <aside>\n                    <button onClick={() => history.push('/')}>Go back</button>\n                    <span>{details.name}</span>\n                </aside>\n                <ImgContainet>\n                    <img src={details.img} alt={details.name} />\n                </ImgContainet>\n\n\n                <ButtonContainer>\n                    <button onClick={() => moveTo('prev')}>Prev</button>\n                    <button onClick={() => moveTo('next')}>Next</button>\n                </ButtonContainer>\n                <h1>Pokedex</h1>\n            </Container>\n\n            {isUserMsg && <UserMsg>Coming soon...</UserMsg>}\n        </>\n    )\n}\n","import { HomePage } from \"./cmps/HomePage\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { PokemonDetails } from \"./cmps/PokemonDetails\";\nimport { createGlobalStyle } from \"styled-components\";\n\n\nconst GlobalStyle = createGlobalStyle`\n*{\n  background-color: #383838;\n  transition: 0.3s; \n  color: white;\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n}\n`\n\nfunction App() {\n  return (\n    <>\n      <HashRouter>\n        <GlobalStyle />\n        <Switch>\n          <Route path=\"/details\" component={PokemonDetails} />\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\n\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}